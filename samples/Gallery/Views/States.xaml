<?xml version="1.0" encoding="utf-8" ?>
<ContentView xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:m="clr-namespace:Manuela;assembly=Manuela"
             xmlns:custom="clr-namespace:Gallery.Views.CustomStates"
             x:Class="Gallery.Views.States">

    <VerticalStackLayout>

        <Label
            Style="{StaticResource Headline}"
            Text="States"/>

        <Label
            Text="States is an alternative to Maui Triggers and VisualStates."/>
        <Label
            Text="States simplify the syntax, this makes Xaml easier to read and maintain."/>

        <Label
            Margin="0, 20"
            Text="Property triggers"
            Style="{StaticResource SubHeadline}" />

        <Label
            Text="There are multiple pre-defined property triggers, Disabled, Focused, Hovered, Pressed, Selected, Checked and UnChecked."/>

        <Entry
            Margin="0, 10"
            m:Has.States="{m:States
                Focused={m:Set  Background=Secondary},
                Hovered={m:Set  Background=Primary},
                Disabled={m:Set Background='Gray,Swatch300'}}"/>

        <Button
            Margin="0,10"
            Text="Click me!"
            m:Has.States="{m:States
                Default={m:Set Background=Primary},
                Hovered={m:Set Background='Primary,Swatch200', TextColor='Gray,Swatch950'},
                Pressed={m:Set Background='Primary,Swatch900', TextColor='Gray,Swatch200'}}"/>

        <CheckBox
            Margin="0,10"
            m:Has.States="{m:States
                Checked={m:Set Background=Secondary}}"/>

        <CollectionView
            Margin="0,10"
            SelectionMode="Single">

            <CollectionView.ItemsSource>
                <x:Array Type="{x:Type x:String}">
                    <x:String>Item 1</x:String>
                    <x:String>Item 2</x:String>
                    <x:String>Item 3</x:String>
                </x:Array>
            </CollectionView.ItemsSource>
                
            <CollectionView.ItemTemplate>
                <DataTemplate x:DataType="x:String">
                    <Label
                        Text="{Binding .}"
                        m:Has.States="{m:States
                            Selected={m:Set Background=Secondary}}"/>
                </DataTemplate>
            </CollectionView.ItemTemplate>
        </CollectionView>

        <Label
            Margin="0, 20"
            Text="States using a style"
            Style="{StaticResource SubHeadline}" />

        <VerticalStackLayout>
            <VerticalStackLayout.Resources>
                <Style TargetType="Entry">
                    <Setter Property="Background" Value="{m:Brush 'Primary,Swatch300'}"/>
                    <Setter Property="m:Has.States">
                        <Setter.Value>
                            <m:StatesCollection>
                                <m:Hovered Setters="{m:Set Background='Primary,Swatch300'}" />
                                <m:Pressed Setters="{m:Set Background='Primary,Swatch600'}" />
                                <m:Disabled Setters="{m:Set Background= 'Primary,Swatch100'}"/>
                            </m:StatesCollection>
                        </Setter.Value>
                    </Setter>
                </Style>
            </VerticalStackLayout.Resources>

            <Entry Text="Press or hover me" />
            <Entry Text="Press or hover me" IsEnabled="False" />
            <Entry Text="Press or hover me" />
            <Entry Text="Press or hover me" />

        </VerticalStackLayout>

        <Label
            Margin="0, 20"
            Text="Data triggers / Custom triggers"
            Style="{StaticResource SubHeadline}" />

        <Label
            Margin="0, 20"
            Text="Disable the button when the entry text is empty." />

        <Entry x:Name="entry" Placeholder="Enter text" />
        <Button
            Text="Save">
            <m:Has.States>
                <m:StatesCollection>
                    <custom:IsEmpty Entry="{x:Reference entry}" Setters="{m:Set IsEnabled=False}"/>
                </m:StatesCollection>
            </m:Has.States>
        </Button>
            
        <Label
            Margin="0, 20"
            Text="In the next trigger we evaluate if any entry child text is empty, if any is empty the button is disabled." />

        <VerticalStackLayout x:Name="layout">
            <Entry Placeholder="Enter mail" />
            <Entry  Placeholder="Enter phone" />

            <Button
                Text="Save">
                <m:Has.States>
                    <m:StatesCollection>
                        <custom:IsAnyChildEmpty
                            Layout="{x:Reference layout}"
                            Setters="{m:Set IsEnabled=False}"/>
                    </m:StatesCollection>
                </m:Has.States>
            </Button>
        </VerticalStackLayout>

        <Label
            Margin="0, 20"
            Text="Named states"
            Style="{StaticResource SubHeadline}" />

        <Button
            Text="Click me to toggle the state"
            Clicked="ToggleState">

            <m:Has.States>
                <m:StatesCollection>
                    <m:State Name="active" Setters="{m:Set Background=Secondary}"/>
                </m:StatesCollection>
            </m:Has.States>
        </Button>

        <Label
            Margin="0, 20"
            Text="Adaptive / Responsive triggers"
            Style="{StaticResource SubHeadline}" />

        <Label
            Margin="0, 20"
            Text="Useful to share the UI between mutiple screen sizes, the menu on this app uses this feature, there are 4 sizes:" />
        <Label Text="Xs &lt; 576 device-independent units" />
        <Label Text="Sm &gt;= 576 device-independent units" />
        <Label Text="Md &gt;= 768 device-independent units" />
        <Label Text="Lg &gt;= 1024 device-independent units" />
        <Label Text="Xl &gt;= 1536 device-independent units" />

        <Button
            Margin="0, 10"
            Text="This button changes background depending on the screen size"
            m:Has.States="{m:States
                OnXs=   {m:Set Background=Primary},
                OnSm=   {m:Set Background=Secondary},
                OnMd=   {m:Set Background=Tertiary},
                OnXl=   {m:Set Background=Gray},
                OnXxl=  {m:Set Background=Gradient}}">
        </Button>

        <Label
            Margin="0, 20"
            Text="Platform"
            Style="{StaticResource SubHeadline}" />

        <Label
            Margin="0, 20"
            Text="Useful to customize things depending if running on Windows, iOS, Android, MacOS, Tizen or WatchOs" />

        <Button
            Margin="0, 10"
            Text="This button changes background depending on the OS"
            m:Has.States="{m:States
                OnWindows=  {m:Set Background=Primary},
                OnMacOS=    {m:Set Background=Secondary},
                OnAndroid=  {m:Set Background=Tertiary},
                OniOS=      {m:Set Background=Secondary},
                OnWatchOS=  {m:Set Background=Secondary},
                OnTizen=    {m:Set Background=Gray}}">
        </Button>

        <Label
            Margin="0, 20"
            Text="Idiom"
            Style="{StaticResource SubHeadline}" />

        <Label
            Margin="0, 20"
            Text="Useful to customize things depending if the device is Desktop, Tablet, Phone, TV or Watch" />

        <Button
            Margin="0, 10"
            Text="This button changes background depending on the screen size"
            m:Has.States="{m:States
                OnDesktop=  {m:Set Background=Primary},
                OnPhone=    {m:Set Background=Secondary},
                OnTablet=   {m:Set Background=Tertiary},
                OnTV=       {m:Set Background=Gray},
                OnWatch=    {m:Set Background=Gradient}}">
        </Button>

    </VerticalStackLayout>
</ContentView>
