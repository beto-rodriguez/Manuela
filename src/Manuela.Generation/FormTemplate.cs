using System.Text;
using Microsoft.CodeAnalysis;

namespace Manuela.Generation;

public class FormTemplate
{
    public static void Generate(SourceProductionContext context, TemplateParams templateParams)
    {
        context.AddSource(
            $"{templateParams.TypeName}.g.cs",
            @$"// <auto-generated />
#nullable enable

using Manuela.Forms;

namespace {templateParams.Namespace};

public partial class {templateParams.TypeName}
{{
    public {templateParams.TypeName}()
    {{
        OnInitialized();
        {GetInputInitializers(templateParams)}
    }}
    {GetInputProperties(templateParams)}
}}
");
    }

    private static string GetInputInitializers(TemplateParams templateParams)
    {
        var properties = templateParams.Properties ?? [];
        var initializers = new StringBuilder();

        for (var i = 0; i < properties.Length; i++)
        {
            var property = properties[i];

            _ = initializers.AppendLine($@"
        {property.Name} = new(
            this,
            ""{property.Name}"",
            {property.DisplaySource},
            getter: () => Model.{property.Name},
            setter: value =>
            {{
                var typedValue = ({property.Type})value;
{(property.Type.ToLowerInvariant().TrimEnd('?') == "string"
    ? "                if (typedValue?.Length == 0) typedValue = null;"
    : string.Empty)}
                Model.{property.Name} = typedValue;
            }});");

            if (i < properties.Length - 1)
                _ = initializers.AppendLine("         ");

        }

        return initializers.ToString();
    }

    private static string GetInputProperties(TemplateParams templateParams)
    {
        var properties = templateParams.Properties ?? [];
        var propertiesSyntax = new StringBuilder();

        for (var i = 0; i < properties.Length; i++)
        {
            var property = properties[i];

            _ = propertiesSyntax.AppendLine($@"
    public PropertyInput {property.Name} {{ get; set; }}");
        }

        return propertiesSyntax.ToString();
    }
}

